// <auto-generated />
using System;
using BioTime.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BioTime.Data.Migrations
{
    [DbContext(typeof(BioTimeDbContext))]
    [Migration("20251023111611_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("BioTime.Data.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("BioTime.Data.Models.AttendanceLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("VerificationMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WorkCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("AttendanceLogs");
                });

            modelBuilder.Entity("BioTime.Data.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AreaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirmwareVersion")
                        .HasColumnType("TEXT");

                    b.Property<string>("IPAddress")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("BioTime.Data.Models.ServerCommand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AckResponse")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AcknowledgedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommandText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceSerialNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAcknowledged")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SentOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ServerCommands");
                });

            modelBuilder.Entity("BioTime.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Privilege")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Pin")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BioTime.Data.Models.UserArea", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AreaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "AreaId");

                    b.HasIndex("AreaId");

                    b.ToTable("UserAreas");
                });

            modelBuilder.Entity("BioTime.Data.Models.AttendanceLog", b =>
                {
                    b.HasOne("BioTime.Data.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("BioTime.Data.Models.Device", b =>
                {
                    b.HasOne("BioTime.Data.Models.Area", "Area")
                        .WithMany("Devices")
                        .HasForeignKey("AreaId");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("BioTime.Data.Models.UserArea", b =>
                {
                    b.HasOne("BioTime.Data.Models.Area", "Area")
                        .WithMany("UserAreas")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioTime.Data.Models.User", "User")
                        .WithMany("UserAreas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BioTime.Data.Models.Area", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("UserAreas");
                });

            modelBuilder.Entity("BioTime.Data.Models.User", b =>
                {
                    b.Navigation("UserAreas");
                });
#pragma warning restore 612, 618
        }
    }
}
